apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
// apply plugin: 'android-aspectjx'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.dzm.ffmpeg"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cFlags "-DSTDC_HEADERS"
                cppFlags ""
                //生成so文件
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
        }

        //声明支持的手机cpu类型
        ndk {
            moduleName "wechat"
            // 设置支持的SO库架构
            abiFilters 'armeabi-v7a', 'arm64-v8a'   //, 'x86'//, 'x86_64'//
        }

        // dex突破65535的限制
        multiDexEnabled true
    }

    flavorDimensions "packageMode"

    productFlavors {
        inhouse {
            dimension "packageMode"

            buildConfigField("String", "BASE_URL_SERVER", "\"http://120.131.7.96/api/\"")
        }
    }




    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            jniDebuggable true
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    useLibrary 'org.apache.http.legacy'
    buildToolsVersion = '28.0.3'
}

/*  AspectJ  */

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.3.0-alpha01'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta7'

    // retrofit + rxjava
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofit"
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofit"
    implementation "com.squareup.retrofit2:converter-jackson:$rootProject.retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.retrofit"
    implementation "com.squareup.retrofit2:retrofit-mock:$rootProject.retrofit"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxjava"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxAndroid"

    // Android Architecture Components
    // lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycle"
    // paging
    implementation "androidx.paging:paging-runtime:$rootProject.paging_version"
    implementation "androidx.paging:paging-runtime:$rootProject.paging_version" // For Kotlin use paging-runtime-ktx
    implementation "androidx.paging:paging-rxjava2:$rootProject.paging_version" // For Kotlin use paging-rxjava2-ktx
    // room
    implementation "androidx.room:room-runtime:$rootProject.room_version"
    annotationProcessor "androidx.room:room-compiler:$rootProject.room_version" // For Kotlin use kapt instead of annotationProcessor
    implementation "androidx.room:room-ktx:$rootProject.room_version" // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-rxjava2:$rootProject.room_version" // optional - RxJava support for Room
    testImplementation "androidx.room:room-testing:$rootProject.room_version" // Test helpers

    // exoplayer
    implementation 'com.google.android.exoplayer:exoplayer:2.9.6'
    implementation 'com.google.android.exoplayer:extension-okhttp:2.9.6'

    // glide
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'

    //解决Glide找不到Android声明库问题
    annotationProcessor 'androidx.annotation:annotation:1.1.0'

    // AspectJ
    implementation 'org.aspectj:aspectjrt:1.8.10'

    // TODO webview
    implementation 'com.github.open-android:BridgeWebView:v1.0'

    // TextView
    implementation 'com.text:alginlib:1.0.1'

    // bmob
    implementation 'cn.bmob.android:bmob-sdk:3.7.3-rc1'

    // AndFix
    implementation 'com.alipay.euler:andfix:0.5.0@aar'

    // Bugly
    implementation 'com.tencent.bugly:crashreport:3.2.32'
    implementation 'com.tencent.bugly:nativecrashreport:3.7.3'

    // Tinker
    //optional, help to generate the final application
//    compileOnly('com.tencent.tinker:tinker-android-anno:1.9.1')
    //tinker's main Android lib
//    implementation('com.tencent.tinker:tinker-android-lib:1.9.1')

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.leakcanary"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakcanary"

    // Optional, if you use support library fragments:
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:$rootProject.leakcanary"

    // alternatively - without Android dependencies for testing
    testImplementation "androidx.paging:paging-common:$rootProject.paging_version" // For Kotlin use paging-common-ktx

//    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'androidx.test:runner:1.1.0'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}
